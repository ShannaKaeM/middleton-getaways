{#
  Grid Book Component - Responsive Grid Layout
  
  This component creates responsive grid layouts for cards and other content.
  Handles different column counts and responsive breakpoints automatically.
  
  Usage:
  {% include 'component-books/grid-book.twig' with {
    variant: 'cards',
    columns: {
      default: 1,
      sm: 2,
      md: 3,
      lg: 4
    },
    gap: 'lg',
    items: [...],
    item_component: 'component-books/card-book.twig',
    class: 'additional-classes'
  } %}
  
  Available variants:
  - cards: Standard card grid
  - stats: Statistics grid (smaller gaps)
  - masonry: Variable height items
  - list: Single column with smaller gaps
#}

{% set grid_variants = {
  cards: {
    gap: 'lg',
    align: 'stretch',
    class: 'grid-cards'
  },
  stats: {
    gap: 'md',
    align: 'stretch',
    class: 'grid-stats'
  },
  masonry: {
    gap: 'lg',
    align: 'start',
    class: 'grid-masonry'
  },
  list: {
    gap: 'sm',
    align: 'stretch',
    columns: {default: 1},
    class: 'grid-list'
  }
} %}

{# Default responsive columns #}
{% set default_columns = {
  default: 1,
  sm: 2,
  md: 3,
  lg: 3,
  xl: 4
} %}

{# Get configuration #}
{% set config = grid_variants[variant] ?? grid_variants.cards %}
{% set grid_columns = columns ?? config.columns ?? default_columns %}
{% set grid_gap = gap ?? config.gap %}
{% set element_class = ['villa-grid', config.class, class]|join(' ')|trim %}

{# Build responsive grid template columns #}
{% set grid_template = 'repeat(' ~ (grid_columns.default ?? 1) ~ ', minmax(0, 1fr))' %}

{# Render the grid #}
<div class="{{ element_class }}" style="
  {%- include 'primitive-books/layout-book.twig' with {
    display: 'grid',
    grid_template_columns: grid_template,
    gap: grid_gap,
    align_items: config.align
  } -%}
">
  {% if items %}
    {% for item in items %}
      <div class="grid-item" style="
        {% if variant == 'masonry' and item.span %}
          grid-row: span {{ item.span }};
        {% endif %}
      ">
        {% if item_component %}
          {% include item_component with item %}
        {% else %}
          {{ item|raw }}
        {% endif %}
      </div>
    {% endfor %}
  {% else %}
    {% block grid_content %}
      {# Content can be passed as a block instead of items array #}
    {% endblock %}
  {% endif %}
</div>

{# Add responsive styles #}
<style>
  {% if grid_columns.sm %}
    @media (min-width: 640px) {
      .{{ element_class|split(' ')|first }} {
        grid-template-columns: repeat({{ grid_columns.sm }}, minmax(0, 1fr)) !important;
      }
    }
  {% endif %}
  
  {% if grid_columns.md %}
    @media (min-width: 768px) {
      .{{ element_class|split(' ')|first }} {
        grid-template-columns: repeat({{ grid_columns.md }}, minmax(0, 1fr)) !important;
      }
    }
  {% endif %}
  
  {% if grid_columns.lg %}
    @media (min-width: 1024px) {
      .{{ element_class|split(' ')|first }} {
        grid-template-columns: repeat({{ grid_columns.lg }}, minmax(0, 1fr)) !important;
      }
    }
  {% endif %}
  
  {% if grid_columns.xl %}
    @media (min-width: 1280px) {
      .{{ element_class|split(' ')|first }} {
        grid-template-columns: repeat({{ grid_columns.xl }}, minmax(0, 1fr)) !important;
      }
    }
  {% endif %}
  
  {# Special auto-fit variant #}
  {% if variant == 'cards' and auto_fit %}
    .{{ element_class|split(' ')|first }} {
      grid-template-columns: repeat(auto-fit, minmax({{ auto_fit.min ?? '280px' }}, 1fr)) !important;
    }
  {% endif %}
</style>